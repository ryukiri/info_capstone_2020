{"version":3,"sources":["components/ButtonAppBar/ButtonAppBar.js","pages/home/Home.js","pages/about/About.js","pages/login/Login.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","color","Toolbar","Grid","justify","container","item","Button","href","Typography","variant","style","float","gutterBottom","Home","component","About","Login","Boolean","window","location","hostname","match","routing","exact","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0XASMA,G,MAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,QAIC,SAASK,IACtB,IAAMC,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,SAC9B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAAQ,gBACRC,WAAS,EACTX,QAAS,IAET,kBAACS,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACC,EAAA,EAAD,CAAQC,KAAK,IAAIP,MAAM,SACrB,kBAACQ,EAAA,EAAD,CAAYC,QAAQ,KAAKZ,UAAWD,EAAQF,OAA5C,eAKJ,kBAACQ,EAAA,EAAD,CAAMG,MAAI,GACR,6BACA,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQP,MAAM,QAAQU,MAAO,CAACC,MAAO,UAChD,kBAACH,EAAA,EAAD,CAAYC,QAAQ,QAAQG,cAAY,GAAxC,UAIF,kBAACN,EAAA,EAAD,CAAQC,KAAK,QAAQP,MAAM,QAAQU,MAAO,CAACC,MAAO,UAChD,kBAACH,EAAA,EAAD,CAAYC,QAAQ,QAAQG,cAAY,GAAxC,gB,MChCDC,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAACL,EAAA,EAAD,CAAYC,QAAQ,KAAKK,UAAU,MAAnC,e,MCOSC,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAACP,EAAA,EAAD,CAAYC,QAAQ,KAAKK,UAAU,MAAnC,gB,MCOSE,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAACR,EAAA,EAAD,CAAYC,QAAQ,KAAKK,UAAU,MAAnC,gBCGcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EACF,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIV,UAAWD,IACjC,kBAAC,IAAD,CAAOW,KAAK,SAASV,UAAWC,IAChC,kBAAC,IAAD,CAAOS,KAAK,SAASV,UAAWE,MAMxCS,IAASC,OAAOJ,EAASK,SAASC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6e4e2b56.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport './ButtonAppBar.css';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"white\">\n        <Toolbar>\n          <Grid\n            justify=\"space-between\"\n            container \n            spacing={24}\n          >\n            <Grid item>\n              <Button href=\"/\" color=\"white\">\n                <Typography variant=\"h6\" className={classes.title}>\n                  Scorecard\n                </Typography>\n            </Button>\n            </Grid>\n            <Grid item>\n              <div>\n              <Button href=\"login\" color=\"white\" style={{float: \"right\"}}>\n                <Typography variant=\"body1\" gutterBottom>\n                  Login\n                </Typography>\n              </Button>\n              <Button href=\"about\" color=\"white\" style={{float: \"right\"}}>\n                <Typography variant=\"body1\" gutterBottom>\n                  About\n                </Typography>\n              </Button>\n              </div>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n\n    </div>\n  );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport ButtonAppBar from '../../components/ButtonAppBar/ButtonAppBar';\nimport './Home.css';\n\nfunction Home() {\n  return (\n    <div>\n      <ButtonAppBar/>\n      <Typography variant=\"h1\" component=\"h2\">\n        Home Page\n      </Typography>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport ButtonAppBar from '../../components/ButtonAppBar/ButtonAppBar';\nimport './About.css';\n\nfunction About() {\n  return (\n    <div>\n      <ButtonAppBar/>\n      <Typography variant=\"h1\" component=\"h2\">\n        About Page\n      </Typography>\n    </div>\n  );\n}\n\nexport default About;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport ButtonAppBar from '../../components/ButtonAppBar/ButtonAppBar';\nimport './Login.css';\n\nfunction Login() {\n  return (\n    <div>\n      <ButtonAppBar/>\n      <Typography variant=\"h1\" component=\"h2\">\n        Login Page\n      </Typography>\n    </div>\n  );\n}\n\nexport default Login;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport Home from './pages/home/Home'\nimport About from './pages/about/About'\nimport Login from './pages/login/Login'\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/login\" component={Login} />\n      </div>\n    </Router>\n);\n\n// ReactDOM.render(<Home />, document.getElementById('root'));\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}